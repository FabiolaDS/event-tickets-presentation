@page "/events"

@using eventTicketPesentation.Models
@using eventTicketPesentation.Service
@inject IEventService _service
@inject ICategoryService _categoryService
@using eventTicketPesentation.Shared.Components.EventCard
@using eventTicketPesentation.Shared.Components.Preloader
@using eventTicketPesentation.Shared.Components.NavMenu

<NavMenu ShowLogin="true" ShowRegister="true"></NavMenu>
<section class="section">
    <h1 class="events__title">Events</h1>
    <div class="filters container">
        <div class="search__container ">
            <img
                class="search__icon"
                src="images/search-icon.svg"
                alt="Search icon"/>
            <input placeholder="Search by name" class="search__input" type="text"/>
        </div>
        <select class="input filter__location" id="location">
            <option value="">Select location</option>
            <option value="">
                All
            </option>
            <option value="Copenhagen">Copenhagen</option>
            <option value="Horsens">Horsens</option>
            <option value="Aarhus">Aarhus</option>
            <option value="Odense">Odense</option>
            <option value="Aalborg">Aalborg</option>
            <option value="Kolding">Kolding</option>
            <option value="Esbjerg">Esbjerg</option>
        </select>

        <select class="input filter__category" id="category" @onchange="FilterEventsByCategory">
            <option value="">
                All
            </option>
            @if (_categories != null)
            {
                foreach (var category in _categories)
                {
                    <option value="@category.Id">
                        @category.Name
                    </option>
                }
            }


        </select>
    </div>

    @if (_events == null)
    {
        <Preloader/>
    }
    else
    {
        <div class="container">
            <div class="row" style="margin-top: 40px;">
                @foreach (var eventItem in _events)
                {
                    <EventCard Event="@eventItem">
                    </EventCard>
                }
            </div>
        </div>
    }
</section>

@code {
    private List<Event> _events;
    private List<Category> _categories;

    protected override async Task OnInitializedAsync()
    {
        _events = await _service.GetUpcomingEventsAsync();
        _categories = await _categoryService.GetAllCategoriesAsync();
        StateHasChanged();
    }

    private async Task FilterEventsByCategory(ChangeEventArgs args)
    {
        if (args.Value == null || args.Value.ToString().Equals(""))
        {
            _events = await _service.GetUpcomingEventsAsync();
        }
        else
        {
            _events = await _service.GetUpcomingEventsByCategoryAsync(Convert.ToInt64(args.Value)); 
        }
        StateHasChanged();
    }

}