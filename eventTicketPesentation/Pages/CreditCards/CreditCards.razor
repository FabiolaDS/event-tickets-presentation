@page "/creditCards"
@inject ICreditCardService _cardService
@inject AuthenticationStateProvider _authenticationStateProvider
@using eventTicketPesentation.Shared.Components.PageSwitcher
@using eventTicketPesentation.Shared.Components.NavMenu
@using eventTicketPesentation.Shared.Components.Preloader
@using eventTicketPesentation.Models
@using eventTicketPesentation.Service
<NavMenu/>

<section class=" section">
    <div class="container">
        <div class="row">
            <PageSwitcher></PageSwitcher>
            @if (_creditCards == null)
            {
                <Preloader/>
            }
            else
            {
                <div class="col-xs-12 col-sm-7 col-md-9 col-lg-8">
                    <div class="row">

                        @foreach (var cardItem in _creditCards)
                        {
                            <div class="col-md-6">
                                <div class="creditCard">
                                    <img src="images/credit-card-chip.svg" class="creditCard__chip" alt="Credit card chip"/>
                                    <h3 class="creditCard__number text-white">@cardItem.CardNumber</h3>
                                    <div class="creditCard__data-wrapper">
                                        <h4 class="creditCard__owner text-white">@cardItem.CardOwnerName</h4>
                                        <div>
                                            <p class="m-0 text-white">valid thru</p>
                                            <h5 class="m-0 text-white">@cardItem.ExpiryMonth/@cardItem.ExpiryYear</h5>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        }

                    </div>
                </div>
            }
        </div>
    </div>
</section>


@code {

    private List<CreditCard> _creditCards;
    private User _user = new User();

    protected override async Task OnInitializedAsync()
    {
        _user = ((CustomAuthenticationStateProvider) _authenticationStateProvider).LoggedInUser;

        _creditCards = await _cardService.GetCreditCardsForUserAsync(_user.Id);
    }

}