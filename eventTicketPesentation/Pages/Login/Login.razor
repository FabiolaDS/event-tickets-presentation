@page "/login"
@using eventTicketPesentation.Shared.Components.NavMenu
@using eventTicketPesentation.Service.dto
@using eventTicketPesentation.Service
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<NavMenu ShowRegister="true"></NavMenu>
<section class="section">
    <EditForm Model="@_loginUserDto" OnSubmit="@Submit">
        <h1>Login</h1>
        <div class="form__group">
            <label >Email address</label>
            <input type="email" placeholder="email" @bind-value="_loginUserDto.email"/>
        </div>
        <div class="form__group">
            <label >Password</label>
            <input type="password" placeholder="password" @bind-value="_loginUserDto.password"/>
        </div>
        <div> @errorMessage </div>
        <button>Login to your account</button>
        <div class="auth__redirect">
            <p class="auth__paragraph">Not on Event Enthusiast yet?</p>
            <a href="/sign-up" class="auth__link">
                Sign Up
            </a>
        </div>
    </EditForm>
</section>

@code {
    private LoginUserDTO _loginUserDto = new LoginUserDTO();
    private string errorMessage;

    public async Task Submit()
    {
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Login(_loginUserDto);
            _navigationManager.NavigateTo("/account");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }





}