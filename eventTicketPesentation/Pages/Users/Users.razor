@page "/users"
@using eventTicketPesentation.Service
@using eventTicketPesentation.Models
@using eventTicketPesentation.Shared.Components.Preloader
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize(Policy = "isAdmin")]
@inject IUserService _userService


<section class="section">
    <h1 class="text-center">Users</h1>
    @if (_users == null)
    {
        <Preloader/>
    }
    else
    {
        <div class="container">
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Full Name</th>
            <th scope="col">Email</th>
            <th scope="col">Admin Privilege</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.FullName</td>
                <td>@user.Email</td>
                <td>
                    @if (!user.Admin)
                    {
                        <button class="m-0 p-2 button-green"@onclick="@(e => @SetAdmin(user.Id))"> Set admin</button>
                    }
                    
                    @if (user.Admin && LoggedInUser.Id != user.Id)
                    {
                        <img class="card__cancel-button" alt="Icon Cancel" src="images/cancel-button.svg" @onclick="@(e => RemoveAdmin(user.Id))"/>
                    }
                </td>

            </tr>
        }

        </tbody>
    </table>
    </div>
    }


</section>


@code {
    private List<User> _users;
    private User LoggedInUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _users = await _userService.GetAllUsersAsync();
        LoggedInUser = (((CustomAuthenticationStateProvider) _authenticationStateProvider).LoggedInUser);
        StateHasChanged();
    }

    private async Task SetAdmin(long userId)
    {
        await _userService.GrantAdminPrivilege(userId);
        _users = await _userService.GetAllUsersAsync();
        StateHasChanged();
    }
    private async Task RemoveAdmin(long userId)
    {
        await _userService.RemoveAdminPrivilege(userId);
        _users = await _userService.GetAllUsersAsync();
        StateHasChanged();
    }
}