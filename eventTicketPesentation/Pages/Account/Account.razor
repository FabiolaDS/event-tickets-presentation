@page "/account"
@attribute [Authorize]
@inject IUserService _userService
@inject AuthenticationStateProvider _authenticationStateProvider
@* @inject CustomAuthenticationStateProvider _authenticationStateProvider *@
@using eventTicketPesentation.Shared.Components.PageSwitcher
@using eventTicketPesentation.Shared.Components.NavMenu
@using eventTicketPesentation.Models
@using eventTicketPesentation.Service
<NavMenu></NavMenu>
<section class=" section">
    <div class="container">
        <div class="row">
            <PageSwitcher></PageSwitcher>
            <div class="account__container col-xs-12 col-sm-7 col-md-8">
                <EditForm Model="@user" OnValidSubmit="@Submit">
                    <h1>Personal info</h1>
                    <div class="form__group">
                        <label >Email address</label>
                        <InputText type="email" @bind-Value="@user.Email"/>
                    </div>

                    <div class="form__group ">
                        <label >Full Name</label>
                        <InputText type="text" @bind-Value="@user.FullName"/>
                    </div>

                    <div class="form__group">
                        <label >Password</label>
                        <InputText type="password" placeholder="password" @bind-Value="@user.Password"/>
                    </div>
                    <div class="form__group">
                        <label >Confirm password</label>
                        <InputText type="password" placeholder="password" @bind-Value="@_password"/>
                    </div>

                    <div>@_errorMessage</div>

                    <button type="submit" class="button__full-width button-green">Save</button>

                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private User user = new User();
    private string _password;
    private string _errorMessage;

    private void Submit()
    {
        if (user.Password != _password)
        {
            _errorMessage = "Password does not match";
            return;
        }
        try
        {
            _userService.UpdateUserAsync(user);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var authState = _authenticationStateProvider.GetAuthenticationStateAsync().Result;
        foreach (var claim in authState.User.Claims)
        {
            if (claim.Type.Equals("id"))
            {
                user.Id = Convert.ToInt64(claim.Value);
                return;
            }

            if (claim.Type.Equals("email"))
            {
                user.Email = claim.Value;
                return;
            }
            
            if (claim.Type.Equals("Name"))
            {
                user.FullName = claim.Value;
                return;
            }
            
            
        }
    }

}