@page "/events/{id:long}"
@inject IEventService _service
@inject NavigationManager _navigationManager
@using eventTicketPesentation.Service
@using eventTicketPesentation.Models
@inject AuthenticationStateProvider _authenticationStateProvider

<section class="event">
    <div class="container image__container">
        @if (_event.IsCancelled)
        {
            <img class="event__cancelled-mark" alt="Event Cancelled Mark" src="images/cancelled-mark.svg"/>
        }

        <AuthorizeView Policy="isAdmin">
            <Authorized>
                <a href="@($"/events/{_event.Id}/editEvent")">
                    <img class="event__edit-button" alt="Icon Edit" src="images/edit-icon.svg"/>
                </a>
            </Authorized>
        </AuthorizeView>
        <img class="img-fluid event__thumbnail" src="@_event.Thumbnail" alt="Thumbnail"/>
    </div>
    <h3 class="event__title">@_event.Name</h3>

    <div class="event__details">
        <ul class="event__data">
            <li class="event__data-item">
                <img class="event__icon" src="images/calendar-icon.svg" alt="Calendar icon"/>
                <h5 class="event__text">@_event.TimeOfTheEvent.ToShortDateString()</h5>
            </li>
            <li class="event__data-item">
                <img class="event__icon" src="images/time-icon.svg" alt="Time icon"/>
                <h5 class="event__text">@_event.TimeOfTheEvent.DayOfWeek, @_event.TimeOfTheEvent.TimeOfDay </h5>
            </li>
            <li class="event__data-item">
                <img class="event__icon" src="images/location-icon.svg" alt="Location icon"/>
                <h5 class="event__text">@_event.Location, @_event.Address</h5>
            </li>
        </ul>
    </div>
    <div class="event__payment">
        <div class="event__payment-price">
            @if (_event.RemainingTickets == 0)
            {
                <span class="card__soldOut-mark ">sold out</span>
            }
            <div class="d-flex flex-column">
                <div class="mb-3"> <b>Tickets Available: </b> @_event.RemainingTickets </div>
                <div class="d-flex">
                    <img class="event__icon" src="images/tickets-icon.svg" alt="Tickets icon"/>
                    <h5 class="event__text">@_event.TicketPrice dkk</h5>
                </div>
            </div>
        </div>

    </div>

    @if (_event.RemainingTickets != 0 && !_event.IsCancelled)
    {
        <a class="event__buy-link main-link" href="@($"/events/{_event.Id}/checkout")">Buy ticket</a>
    }
    else
    {
        <button class="event__soldOut-button" disabled="disabled">Buy Ticket</button>
    }

    <div class="event__description">
        <p class="event__paragraph">@_event.Description</p>
    </div>
</section>


@code {

    [Parameter]
    public long Id { get; set; }
    private User LoggedInUser { get; set; }

    private Models.Event _event = new Models.Event();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Id: " + Id);
        _event = await _service.GetEventByIdAsync(Id);
        LoggedInUser = (((CustomAuthenticationStateProvider) _authenticationStateProvider).LoggedInUser);
        Console.WriteLine(_event);
        StateHasChanged();
    }



}