@page "/events/{eventId:long}/checkout"
@inject IEventService _eventService
@inject ITicketService _ticketService
@inject ICreditCardService _creditCardService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@using eventTicketPesentation.Shared.Components.Preloader
@using eventTicketPesentation.Shared.Components.NavMenu
@using eventTicketPesentation.Shared.Components.Wizard
@using eventTicketPesentation.Service
@using eventTicketPesentation.Models
@using eventTicketPesentation.Service.dto
<NavMenu/>
<section class="section position-relative">
    <h1 class="text-center">@_event.Name</h1>
    <div class="container">

        <Wizard Id="Checkout" Submit="@Submit">
            <WizardStep Name="1. Nr. of tickets">

                <p class="text-center text-black-50 font-weight-bold">@_event.DateTime.Date.ToShortDateString() | @_event.DateTime.TimeOfDay.Hours pm</p>
                <div class="row justify-content-center" style="padding-top: 20px">
                    <div class="col-md-10 col-md-offset-1">
                        <table class="step1-table">
                            <thead>
                            <tr>
                                <td >Available</td>
                                <td>Price</td>
                                <td>Quantity</td>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>@_event.AvailableTickets</td>

                                <td>
                                    <div>@_event.TicketPrice</div>
                                </td>
                                <td>
                                    <div class="ticket_counter">
                                        <div class="spinner">
                                            <button class="decrease" @onclick="DecrementCount">-</button><input type="text" min="1" value="@numberOfTickets" class="count_ticket value"><button @onclick="IncrementCount" class="increase">+</button>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="container">

                        <div class="total">
                            <div class="left">Total</div>
                            <div class="right">@TotalPrice()</div>
                        </div>
                    </div>
                </div>
            </WizardStep>

            <WizardStep Name="2. Payment">
                <div class="col-md-10 mx-auto">
                    <div class="row justify-content-around">
                        <div>
                            <div>
                                <h2 class="mb-4">Your booking:</h2>
                                <p> Nr. of tickets: <span>@numberOfTickets</span></p>
                                <p>Final price: <span>@TotalPrice()</span> </p>
                            </div>

                            @if (_rememberedCreditCards == null)
                            {
                                <Preloader/>
                            }
                            else
                            {
                                <div class="mt-5">
                                    <select @onchange="@ChangeCreditCard">
                                        <option value="" selected>Select Credit Card</option>
                                        @foreach (var card in _rememberedCreditCards)
                                        {
                                            <option value="@card.CardNumber">@card.CardNumber</option>
                                        }
                                    </select>
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            <h2 class="mb-4">Card Details</h2>
                            <EditForm Model="_creditCard">
                                <div class="form__group">

                                    <label >Card Owner</label>
                                    <InputText type="text" placeholder="Name Surname" @bind-Value="@_creditCard.CardOwnerName"/>
                                </div>
                                <div class="form__group">

                                    <label >Card Number</label>
                                    <InputText type="text" maxlength="16" minlength="16" @bind-Value="@_creditCard.CardNumber" placeholder="1234 1234 1234 1234"/>
                                </div>
                                <div class="form__inputs">
                                    <div class="form__group form__group_half">

                                        <label >Expiry Date(MM)</label>
                                        <InputNumber @bind-Value="@_creditCard.ExpiryMonth" type="number" placeholder="MM"/>
                                    </div>
                                    <div class="form__group form__group_half">
                                        <label class="hide">Expiry Date(YY)</label>
                                        <InputNumber @bind-Value="@_creditCard.ExpiryYear" type="number" placeholder="YY"/>
                                    </div>
                                </div>
                                <div class="form__group">

                                    <label >Card Security Code</label>
                                    <InputNumber @bind-Value="@_creditCard.Cvv" type="number" minlength="3" maxlength="3" placeholder="123"/>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>


            </WizardStep>
        </Wizard>
    </div>
</section>

@code
{
    [Parameter]
    public long EventId { get; set; }

    private CreditCard _creditCard = new CreditCard();
    private int numberOfTickets = 1;

    private Event _event = new Event();
    private List<CreditCard> _rememberedCreditCards;

    CustomAuthenticationStateProvider authState;

    protected override async Task OnInitializedAsync()
    {
        authState = ((CustomAuthenticationStateProvider) _authenticationStateProvider);

        _event = await _eventService.GetEventByIdAsync(EventId);


        _rememberedCreditCards = await _creditCardService.GetCreditCardsForUserAsync(authState.LoggedInUser.Id);

        StateHasChanged();
    }


    private void ChangeCreditCard(ChangeEventArgs args)
    {
        _creditCard = _rememberedCreditCards.Find(c => c.CardNumber == args.Value?.ToString());
        StateHasChanged();
    }

    private void IncrementCount()
    {
        numberOfTickets++;
        StateHasChanged();
    }

    private void DecrementCount()
    {
        if (numberOfTickets != 1)
            numberOfTickets--;
        
        StateHasChanged();
    }

    private double TotalPrice()
    {
        return _event.TicketPrice * numberOfTickets;
    }

    private async void Submit()
    {
        try
        {
            if (_creditCard.Id == null)
            {
                var createCreditCardDto = new CreateCreditCardDTO()
                {
                    CardNumber = _creditCard.CardNumber,
                    ExpiryMonth = _creditCard.ExpiryMonth,
                    ExpiryYear = _creditCard.ExpiryYear,
                    Cvv = _creditCard.Cvv,
                    CardOwnerName = _creditCard.CardOwnerName,
                    OwnerId = authState.LoggedInUser.Id
                };
                _creditCard = await _creditCardService.AddCreditCardAsync(createCreditCardDto);
            }

            BookTicketDTO ticketDto = new BookTicketDTO()
            {
                EventId = EventId,
                PaymentId = _creditCard.Id ?? throw new ArgumentException(),
                BuyerId = authState.LoggedInUser.Id,
                NoOfTickets = numberOfTickets
            };

            await _ticketService.BookTicketsAsync(ticketDto);

            _navigationManager.NavigateTo("/thank-you");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}